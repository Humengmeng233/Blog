import{_ as r,c as i,b as o,o as l}from"./app-B-WzGfHg.js";const p={};function t(a,e){return l(),i("div",null,e[0]||(e[0]=[o('<h4 id="docker是什么" tabindex="-1"><a class="header-anchor" href="#docker是什么"><span>docker是什么</span></a></h4><p>【docker是什么？和kubernetes(k8s)是什么关系？-哔哩哔哩】 <a href="https://b23.tv/y5YL7N7" target="_blank" rel="noopener noreferrer">https://b23.tv/y5YL7N7</a></p><p>程序依赖环境，环境不同，程序可能跑不起来，如果能将程序和环境一起打包，那就可以了，docker就是提供这样的功能。</p><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h4><p>Windows下docker提供了图形化界面的docker desktop，只需要点一点就能安装， so easy（就是默认安装到C盘了，这边建议有下C盘焦虑的搞虚拟机）</p><p>docker desktop 使用十分方便，docker hub 直接pull</p><p>如果同时运行两个MySQL，让两个容器端口不一样</p><h4 id="基础镜像是什么" tabindex="-1"><a class="header-anchor" href="#基础镜像是什么"><span>基础镜像是什么</span></a></h4><p>之前说环境不同程序运行结果不同，所以首先要统一环境。而环境中最重要的是<strong>操作系统</strong>，让所有程序跑在同一个操作系统上。 操作系统分为<strong>用户空间</strong> 和<strong>内核空间</strong> 因此我们可以阉割操作系统，只是利用用户空间部分，就能构建出应用所需的环境。</p><h4 id="dockerfile是什么" tabindex="-1"><a class="header-anchor" href="#dockerfile是什么"><span>dockerfile是什么</span></a></h4><p>有了基础镜像，我们通常还需要一些依赖比如yum install gcc,甚至创建一些文件夹，最后才是运行目标程序。在Linux中我们可以把要做的事情以命令行的形式一行行列出来。 像这样一行行的列清楚了从操作系统到应用服务的文件就是dockerfile.</p><h4 id="容器镜像是什么" tabindex="-1"><a class="header-anchor" href="#容器镜像是什么"><span>容器镜像是什么</span></a></h4><p>dockerfile只是列出来要做什么，并没有真正开始做。当用命令执行<strong>docker build</strong>的时候，<strong>docker</strong>会根据<strong>dockerfile</strong>的说明，一行行构建环境加应用程序，最终将<strong>环境</strong>和<strong>应用程序</strong>打包成类似压缩包的东西，就是<strong>容器container镜像</strong>。 我们可以在同一个操作系统上同时跑多个容器，且这些容器互相独立、互相隔离。</p><h4 id="常见命令" tabindex="-1"><a class="header-anchor" href="#常见命令"><span>常见命令</span></a></h4><p>【40分钟的Docker实战攻略，一期视频精通Docker】<a href="https://www.bilibili.com/video/BV1THKyzBER6?vd_source=c49ce4d1601c73b33de5f82f9bb94f97" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1THKyzBER6?vd_source=c49ce4d1601c73b33de5f82f9bb94f97</a></p><ul><li><p>docker pull 从仓库下载镜像</p><ul><li><p>一个镜像有四部分内容</p><p>docker pull docker.io/library/nginx:latest</p><ol><li><p>docker.io ：registry:仓库地址（官方仓库可省略）</p></li><li><p>library ： namespace命名空间（作者名）</p></li><li><p>latest ： 版本名</p></li></ol></li><li><p>docker.io/library/nginx:latest 一个镜像库，存放同一个镜像的不同版本</p></li></ul><p>（会魔法的可使用魔法）</p></li><li><p>sudo docker images 列出所有下载过的Docker镜像</p></li><li><p>sudo docker rmi 删除镜像</p></li><li><p>docker pull –platform=xxxxx nginx</p></li><li><p>docker run +镜像名 ：使用镜像<strong>创建</strong>并<strong>运行</strong>容器</p><ul><li><p>后面加上 -d,分离模式，表示让容器在后台执行，不会阻塞当前窗口</p></li><li><p>-p 端口映射，每个docker容器都运行在一个独立的虚拟环境里面，容器的网络与宿主机是隔离的，默认情况下并不能直接从宿主机访问到docker的内部网络 !</p><p>冒号前是宿主机端口，冒号后是容器内端口，顺序是先外后内</p></li><li><p>-v 宿主机目录：容器内目录 把宿主机与容器文件目录进行绑定，容器内对文件夹的修改会影响宿主机的文件夹，宿主机对文件夹修改同样会影响容器内文件，宿主机和容器通过这个目录，紧密的联系到了一起，即挂在卷。删除容器的时候保证容器不会删除 !</p></li><li><p>-e 把数据库的账号密码作为环境变量</p></li><li><p>临时调试容器，以下这两个命令通常连在一起用</p><ul><li><p>-it 让我们的控制台进入容器进行交互</p></li><li><p>--rm 当容器停止时就把容器删除</p></li></ul></li><li><p>--restart 用来配置容器在停止时的重启策略</p><ul><li><p>常用的有 --restart always，只要容器停止，就会立即重启</p></li><li><p>--restart unless-stopped，与上面的区别是手动停止容器不会重启</p></li></ul></li></ul></li><li><p>docker ps 查看正在运行的容器</p></li><li><p>docker rm(删除容器) -f(强制删除正在运行的容器) + 容器名</p></li><li><p>docker volume list 列出所有创建过的卷</p></li><li><p>docker volume rm 删除一个卷</p></li><li><p>docker volume prune -a 删除所有没有任何容器在使用的卷</p></li><li><p>docker inspect + 容器名字 容器启动时的参数是什么（直接把打印出来的丢给ai）还可以查看很多容器的信息等等，问ai吧</p></li></ul>',16)]))}const s=r(p,[["render",t]]),c=JSON.parse('{"path":"/article/3r4onz0r/","title":"Docker","lang":"zh-CN","frontmatter":{"title":"Docker","createTime":"2025/07/25 23:45:10","tags":["docker"],"permalink":"/article/3r4onz0r/"},"readingTime":{"minutes":3.64,"words":1093},"git":{"createdTime":1753459799000,"updatedTime":1753459799000,"contributors":[{"name":"mengmeng","username":"mengmeng","email":"15314326450@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/mengmeng?v=4","url":"https://github.com/mengmeng"}]},"filePathRelative":"preview/Docker.md","headers":[],"categoryList":[{"id":"5ebeb6","sort":10000,"name":"preview"}]}');export{s as comp,c as data};
